<?php

namespace App\Http\Controllers;

use App\Models\Route;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Ramsey\Uuid\Uuid;
use Symm\Gisconverter\Gisconverter;

/**
 * Class RouteController
 * @package App\Http\Controllers
 */
class RouteController extends Controller
{
    /**
     * This will return a json object with the status and the uuid
     * @return JsonResponse
     */
    public function generateCuid(): JsonResponse
    {
        return response()->json([
            'status' => 'Success',
            'unique_identifier' => Uuid::uuid4()
        ]);
    }

    /**
     * This returns all routes that are from the user with the corresponding cuid
     * @param string $cuid
     * @return JsonResponse
     */
    public function findAllByCuid(string $cuid): JsonResponse
    {
        $all_routes = Route::all()->where('cuid', '=', $cuid);
            $arr = [];

            foreach ($all_routes as $routes => $route) {
                $arr[$routes]['route_id'] = $route->id;
                $arr[$routes]['filename'] = $route->filename;
                $arr[$routes]['xml_data'] = $route->xml_data;
                $arr[$routes]['geo_json'] = $route->geo_json;
                $arr[$routes]['created_at'] = $route->created_at;
            }

            if (empty($arr)) {
                return response()->json(['routes' => [
                    'status' => 'error',
                    'message' => 'This CUID has no data. Please make sure that you use the correct CUID',
                    'route_id' => null,
                    'filename' => null,
                    'xml_data' => null,
                    'geo_json' => null,
                    'created_at' => null
                ]]);
            } else {
                return response()->json(['routes' => $arr]);
            }



    }

    /**
     * Saves the file that is uploaded to the database with the uuid that is generated by the user
     * @param Request $request
     * @param string $cuid
     * @return JsonResponse
     */
    public function store(Request $request, string $cuid): JsonResponse
    {
        $route = new Route();
        $route->cuid = $cuid;
        $route->filename = $request->file('route')->getClientOriginalName();
        $route->xml_data = $request->file('route')->getContent();
        $route->geo_json = Gisconverter::gpxToGeojson($request->file('route')->getContent());

        // Store file size in the database
        $filesize = $request->file('route')->getSize(); // In bytes

        $route->filesize_in_bytes = $filesize; // store in bytes
        $route->filesize_in_kb = round($filesize / 1024, 0, PHP_ROUND_HALF_UP); // Store in kb

        if ($route->save()) {
            return response()->json([
               'status' => 'success',
               'message' => 'Successfully Uploaded file'
            ])->setStatusCode(200);
        } else {
            return response()->json([
                'status' => 'error',
                'message' => 'Error while uploading file to the database. Please try again'
            ])->setStatusCode(409);
        }
    }

    /**
     * Destroy will delete a record from the database specified by (cu)id
     *
     * @param int $id
     * @param string $cuid
     * @return JsonResponse
     */
    public function destroy(int $id, string $cuid): JsonResponse
    {
        $route = Route::where([
            ['id', '=', $id],
            ['cuid', '=', $cuid]
        ]);

        if ($route->delete()) {
            return response()->json([
                'status' => 'success',
                'message' => 'Successfully delete file'
             ]);
        } else {
            return response()->json([
                'status' => 'error',
                'message' => 'Error while deleting file from the database. Please try again'
            ]);
        }

    }
}
